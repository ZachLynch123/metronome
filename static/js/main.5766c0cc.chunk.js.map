{"version":3,"sources":["click1.wav","click2.wav","Metronome.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Metronome","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleBpmChange","event","bpm","target","value","setState","playClick","_this$state","state","count","beatsPerMeasure","click2","play","click1","startStop","playing","clearInterval","timer","setInterval","Audio","_this$state2","react_default","a","createElement","className","type","min","max","onChange","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_Metronome","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,oDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,4QC4FzBC,cAnFX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAYVQ,gBAAkB,SAAAC,GACd,IAAMC,EAAMD,EAAME,OAAOC,MACzBX,EAAKY,SAAS,CAAEH,SAfDT,EAkBnBa,UAAY,WAAM,IAAAC,EACqBd,EAAKe,MAAhCC,EADMF,EACNE,MAAOC,EADDH,EACCG,gBAEXD,EAAQC,IAAoB,EAC5BjB,EAAKkB,OAAOC,OAEZnB,EAAKoB,OAAOD,OAEZH,IAAUC,EACVjB,EAAKY,SAAS,SAAAG,GAAK,MAAK,CACpBC,MAAQD,EAAMC,MAAQ,KAG1BhB,EAAKY,SAAS,SAAAG,GAAK,MAAK,CACpBC,MAAO,MAhCAhB,EAsCnBqB,UAAY,WACJrB,EAAKe,MAAMO,SAEXC,cAAcvB,EAAKwB,OACnBxB,EAAKY,SAAS,CACZU,SAAS,EACTN,MAAO,MAIThB,EAAKwB,MAAQC,YACXzB,EAAKa,UACJ,GAAKb,EAAKe,MAAMN,IAAO,KAE1BT,EAAKY,SACH,CACEI,MAAO,EACPM,SAAS,GAGXtB,EAAKa,aAvDXb,EAAKe,MAAQ,CACTO,SAAS,EACTN,MAAO,EACPP,IAAK,IACLQ,gBAAiB,GAErBjB,EAAKoB,OAAS,IAAIM,MAAMN,KACxBpB,EAAKkB,OAAS,IAAIQ,MAAMR,KAVTlB,wEA+DV,IAAA2B,EAC2BxB,KAAKY,MAA7BO,EADHK,EACGL,QAASb,EADZkB,EACYlB,IAAKO,EADjBW,EACiBX,MAEtB,OACIY,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,WAAMrB,EAAN,QACAmB,EAAAC,EAAAC,cAAA,SAAOE,KAAK,QACZC,IAAI,KACJC,IAAI,MACJvB,MAAOF,EACP0B,SAAUhC,KAAKI,mBAEnBqB,EAAAC,EAAAC,cAAA,UAAQM,QAASjC,KAAKkB,WAAaC,EAAU,OAAS,SACtDM,EAAAC,EAAAC,cAAA,WAAMd,WA/EEqB,aCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAAeC,SAASC,eAAe,SD2HjD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5766c0cc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/click1.7a7930a2.wav\";","module.exports = __webpack_public_path__ + \"static/media/click2.fe0ded65.wav\";","import React, { Component } from 'react';\r\nimport './metronome.css';\r\nimport click1 from './click1.wav';\r\nimport click2 from './click2.wav';\r\n\r\n\r\n\r\nclass Metronome extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            playing: false,\r\n            count: 1,\r\n            bpm: 100,\r\n            beatsPerMeasure: 4,\r\n        };\r\n        this.click1 = new Audio(click1);\r\n        this.click2 = new Audio(click2);\r\n    }\r\n\r\n    handleBpmChange = event => {\r\n        const bpm = event.target.value;\r\n        this.setState({ bpm });\r\n    }\r\n\r\n    playClick = () => {\r\n        const { count, beatsPerMeasure } = this.state;\r\n\r\n        if (count % beatsPerMeasure === 0) { \r\n            this.click2.play();\r\n        } else {\r\n            this.click1.play();\r\n        }\r\n        if (count !== beatsPerMeasure){\r\n            this.setState(state => ({\r\n                count: (state.count + 1)\r\n            }));\r\n        } else {\r\n            this.setState(state => ({\r\n                count: 1\r\n            }));\r\n        }\r\n    \r\n    }\r\n\r\n    startStop = () => {\r\n        if (this.state.playing) {\r\n            // Stop the timer\r\n            clearInterval(this.timer);\r\n            this.setState({\r\n              playing: false,\r\n              count: 1\r\n            });\r\n          } else {\r\n            // Start a timer with the current BPM\r\n            this.timer = setInterval(\r\n              this.playClick,\r\n              (60 / this.state.bpm) * 1000\r\n            );\r\n            this.setState(\r\n              {\r\n                count: 0,\r\n                playing: true\r\n                // Play a click \"immediately\" (after setState finishes)\r\n              },\r\n              this.playClick\r\n            );\r\n          }\r\n    }\r\n\r\n    render() {\r\n        const { playing, bpm, count } = this.state;\r\n\r\n        return(\r\n            <div className=\"metronome\">\r\n                <div className=\"bpm-slider\">\r\n                    <div>{bpm} BPM</div>\r\n                    <input type=\"range\"\r\n                    min=\"60\"\r\n                    max=\"240\"\r\n                    value={bpm}\r\n                    onChange={this.handleBpmChange} />\r\n                </div>\r\n                <button onClick={this.startStop}>{ playing ? 'Stop' : 'Start'}</button>\r\n                <div>{count}</div>\r\n            </div>\r\n        );\r\n      }\r\n}\r\n\r\nexport default Metronome;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Metronome from './Metronome';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Metronome />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}